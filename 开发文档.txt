==应用层==
结构体
--1.读取信息结构体
r_msgt  用于读取信息的结构体
{
    char nomal; // 8bit [0:2] LED1 LED2 LED3 [3] FAN [4] 马达
    float hum;  // 湿度
    float tmp;  // 温度
    int light;  // 光强
}

k_msgt  用于封装阈值信息的结构体
{
    int hum[2];
    int tmp[2];
    int light[2];
}

    控制设备的字符串
char ctl;   8bit [0:2] LED1 LED2 LED3 [3] FAN [4] 马达

big_msgt 上述结构体封装为一个总结构体
{
    r_msgt r_m;
    k_msgt k_m;
    char ctl;   8bit [0:2] LED1 LED2 LED3 [3] FAN [4] 马达
    char flg; //标志位 [0] r_m有内容 [1] k_m有内容 [2] 控制设备有内容 0000 0111 表示全有内容
}                      

--页面提交
    --提交1.cgi
        获取温度上下限  从页面
        获取湿度上下限
        获取光强上下限
        封装到 big_msg 的 k_m 中 flg[1] 置1
        发送到消息队列 's' set value
    --提交2.cgi
        获取照明控制信息 从页面
        获取风扇控制信息
        获取马达控制信息
        封装到 big_msg 的 ctl 中 flg[2] 置1
        发送到消息队列 'd' do something
    --获取1.cgi
        获取温湿度光照信息及其他设备状态 从设备
        封装到 big_msg 的 r_m 中 flg[0] 置1
        发送到消息队列 'r' read value
--页面持续执行.cgi
    初始化设备状态
    初始化线程
    定义全局变量 阈值信息

    定义线程1 阈值唤醒线程
        从消息队列 's' 获取阈值，没有阈值则休眠
        有阈值则更新阈值变量
        唤醒线程2 
    定义线程2 阈值控制线程
        校验是否为0 为0则不处理阈值控制
        每秒从消息队列 'r' 获取温湿度信息 进行阈值控制
    定义线程3 电器设备控制线程
        从消息队列 'd' 获取控制信息，没有则休眠

==驱动层==
获取
    温度
    湿度
    光强 通过ioctl读回
控制
    LED1/2/3 提供read/write方法
    马达/风扇 提供read/write方法
